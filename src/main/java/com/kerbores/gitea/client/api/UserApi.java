/*
 * Gitea API. This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git Do not edit the class
 * manually.
 */

package com.kerbores.gitea.client.api;

import java.util.List;

import org.nutz.http.Header;
import org.nutz.http.Request;
import org.nutz.http.Request.METHOD;
import org.nutz.http.Response;
import org.nutz.http.Sender;
import org.nutz.json.Json;
import org.nutz.lang.util.NutMap;

import com.kerbores.gitea.client.model.AccessToken;
import com.kerbores.gitea.client.model.User;
import com.kerbores.gitea.client.request.ApiClient;

public class UserApi {

    public static final String ACCESS_TOKEN_NAME = "APMP";

    ApiClient apiClient;

    /**
     * 
     */
    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public boolean deleteAccessToken(String user, String password, long id) {
        Response response = Sender.create(Request.create(String.format("%s/users/%s/tokens/%d", apiClient.basePath(), user, id),
                                                         METHOD.DELETE)
                                                 .basicAuth(user, password))
                                  .send();
        return response.isOK();
    }

    public AccessToken createAccessToken(String user, String password) {
        Response response = Sender.create(Request.post(String.format("%s/users/%s/tokens", apiClient.basePath(), user))
                                                 .setData(Json.toJson(NutMap.NEW().addv("name", ACCESS_TOKEN_NAME)))
                                                 .setHeader(Header.create().asJsonContentType())
                                                 .basicAuth(user, password))
                                  .send();
        return apiClient.deserialize(response.getContent(), AccessToken.class);
    }

    public List<AccessToken> accessToken(String user, String password) {
        Response response = Sender.create(Request.get(String.format("%s/users/%s/tokens", apiClient.basePath(), user))
                                                 .basicAuth(user, password))
                                  .send();
        return apiClient.deserializeAsList(response.getContent(), AccessToken.class);
    }

    public User baseOauth(String user, String password) {
        Response response = Sender.create(Request.get(String.format("%s/user", apiClient.basePath())).basicAuth(user, password)).send();
        return apiClient.deserialize(response.getContent(), User.class);
    }

}
